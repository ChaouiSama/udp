#include "Player.cpp"
#include <SFML/Network.hpp>

int main(int argc, char** argv)
{
    const int WIDTH(1000), HEIGHT(1000);

    sf::RenderWindow *window = new sf::RenderWindow(sf::VideoMode(WIDTH, HEIGHT, sf::VideoMode::getDesktopMode().bitsPerPixel), "test", sf::Style::Close, sf::ContextSettings(0, 0, 8, 1, 1, false));
    window->setFramerateLimit(60);

    unsigned short server_port = 2000, remote_port;
    sf::IpAddress server_ip("chaouisama.tk"), remote_ip;

    sf::UdpSocket socket;
    sf::Packet send_packet, receive_packet;

    int my_client_id, client_id, packet_type;
    float x, y;
    sf::Vector2f pos;

    Player player;

    packet_type = 0;
    send_packet << packet_type;

    if (socket.send(send_packet, server_ip, server_port) != sf::Socket::Done)
        std::cout << "can't send connection request" << std::endl;
    std::cout << "connection request sent" << std::endl;
    send_packet.clear();

    while (window->isOpen())
    {
        sf::Event event;

        while (window->pollEvent(event))
        {
            switch (event.type)
            {
            case sf::Event::Closed:
                packet_type = 2;
                send_packet << my_client_id;
                if (socket.send(send_packet, server_ip, server_port) != sf::Socket::Done)
                    std::cout << "can't send disconnection packet" << std::endl;
                send_packet.clear();
                window->close();
                break;

            case sf::Event::KeyPressed:
                if (event.key.code == sf::Keyboard::Escape)
                    window->close();
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::W))
                {
                    //player.m_clients.find(client_id).second.move(0.0f, -10.0f);
                    //shape2.move(0.0f, -10.0f);
                    packet_type = 1;
                    player.setPosition(my_client_id, player.getPosition(my_client_id).x + 0.0f, player.getPosition(my_client_id).y -10.0f);
                    pos = player.getPosition(my_client_id);
                    send_packet << packet_type << my_client_id << pos.x << pos.y;
                    if (socket.send(send_packet, server_ip, server_port) != sf::Socket::Done)
                        std::cout << "can't send move forward packet" << std::endl;
                    send_packet.clear();
                }
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Q))
                {
                    //player.m_clients.find(client_id).second.move(-10.0f, 0.0f);
                    //shape2.move(-10.0f, 0.0f);
                    packet_type = 1;
                    player.setPosition(my_client_id, player.getPosition(my_client_id).x - 10.0f, player.getPosition(my_client_id).y + 0.0f);
                    pos = player.getPosition(my_client_id);
                    send_packet << packet_type << my_client_id << pos.x << pos.y;
                    if (socket.send(send_packet, server_ip, server_port) != sf::Socket::Done)
                        std::cout << "can't send move left packet" << std::endl;
                    send_packet.clear();
                }
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::S))
                {
                    //player.m_clients.find(client_id).second.move(0.0f, 10.0f);
                    //shape2.move(0.0f, 10.0f);
                    packet_type = 1;
                    player.setPosition(my_client_id, player.getPosition(my_client_id).x + 0.0f, player.getPosition(my_client_id).y + 10.0f);
                    pos = player.getPosition(my_client_id);
                    send_packet << packet_type << my_client_id << pos.x << pos.y;
                    if (socket.send(send_packet, server_ip, server_port) != sf::Socket::Done)
                        std::cout << "can't send move backward packet" << std::endl;
                    send_packet.clear();
                }
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::D))
                {
                    //player.m_clients.find(client_id).second.move(10.0f, 0.0f);
                    //shape2.move(10.0f, 0.0f);
                    packet_type = 1;
                    player.setPosition(my_client_id, player.getPosition(my_client_id).x + 10.0f, player.getPosition(my_client_id).y + 0.0f);
                    pos = player.getPosition(my_client_id);
                    send_packet << packet_type << my_client_id << pos.x << pos.y;
                    if (socket.send(send_packet, server_ip, server_port) != sf::Socket::Done)
                        std::cout << "can't send move right packet" << std::endl;
                    send_packet.clear();
                }
                break;

            default:
                break;
            }
        }

        if (socket.receive(receive_packet, remote_ip, remote_port) != sf::Socket::Done && remote_ip != server_ip && remote_port != server_port)
            std::cout << "can't receive packet" << std::endl;
        receive_packet >> packet_type;
        
        switch (packet_type)
        {
        case 0:
            receive_packet >> my_client_id;
            receive_packet.clear();
            player.addPlayer(my_client_id);
            break;

        case 1:
            break;

        case 2:
            break;

        default:
            break;
        }

        window->clear(sf::Color::White);

        for (std::map<int, sf::CircleShape>::iterator iter(player.getPlayerList()->begin()); iter != player.getPlayerList()->end(); ++iter)
            window->draw(iter->second);
        
        window->display();
    }

    return 0;
}